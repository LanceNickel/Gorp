#!/usr/bin/env bash

### [ACTION: MOVE-HOME] ###########################################
#   Description:  Move $HOMEDIR to new location.
#   Parameters:   (required) Absolute path to new home directory

############################ [WARNING] ############################
##    No part of this script is designed to be user-editable.    ##
##   This script is OVERWRITTEN any time a Gorp update is run.   ##
###################################################################



#### GUARDS ################

### KEY GUARD

if [[ "$1" == "pleasedontdothis" ]]; then
    OUTPUT=true
    ERRORS=true

elif [[ "$1" == "pleaseshutup" ]]; then
    OUTPUT=false
    ERRORS=true

elif [[ "$1" == "pleasebesilent" ]]; then
    OUTPUT=false
    ERRORS=false

else
    if $ERRORS; then echo "SCRIPTNAME: Not intended to be run directly. Exit (13)."; fi
    exit 13
fi







#### SCRIPT PARAMETERS ################

source /usr/local/bin/gorpmc/worker/i_getconfigparams.sh

NEW_HOMEDIR=$2







####







### GET SUDO PERMISSIONS RT-GUARD

if $OUTPUT; then echo "Gorp will use sudo to update the configuration file."; fi
sudo whoami > /dev/null







### DOES DESTINATION EXIST/IS IT EMPTY? RT-GUARD

if [[ -d $NEW_HOMEDIR ]]; then
    if $ERRORS; then echo "gorpmovehome: Destination directory already exists. Exit (21)."; fi
    exit 21
fi







### ARE ANY SERVERS RUNNING? RT-GUARD

for d in "$HOMEDIR/servers/"*
do
        SERVER=$(basename "$d")
        
        if [[ $(gorp -s $SERVER | jq .status[].running) == "true" ]]; then
            if $ERRORS; then echo "gorpmovehome: Servers cannot be running. Exit (34)."; fi
            exit 34
        fi
done







### CALL THE WORKER

/usr/local/bin/gorpmc/worker/movehome.sh $1 $NEW_HOMEDIR