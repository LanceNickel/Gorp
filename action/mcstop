#!/usr/bin/env bash

### [ACTION: STOP] ################################################
#   Description:  Stop a server instance.
#   Parameters:   1: (required) Server directory name
#   Flags:        -f fast (skip backup)
#                 -n now  (skip backup and warning)

############################ [WARNING] ############################
##    No part of this script is designed to be user-editable.    ##
##   This script is OVERWRITTEN any time a Gorp update is run.   ##
###################################################################

# Copyright (C) Lance Nickel 2023.
# Distributed under GNU GPL v3.
# <https://gorp.lanickel.com/license/>



#### GUARDS ################

### KEY GUARD

if [[ "$1" == "pleasedontdothis" ]]; then
    handle_error "Script not meant to be run directly"
fi







#### SCRIPT PARAMETERS ################

SERVER=$2
MODE="normal"

OPTIND=2
while getopts ":*" flag; do
    case $flag in
        \?)
            handle_error "Bad input. Expected: gorp stop [server] [-f|n]"
            ;;
    esac
done

OPTIND=3
while getopts ":fn" flag; do
    case $flag in
        f)
            MODE="f"
            ;;
        n)
            MODE="n"
            ;;
    esac
done







####







### PARAM RT-GUARD

if [[ "$SERVER" = "" ]] || [[ "$SERVER" == "fast" ]] || [[ "$SERVER" == "now" ]] || [[ "$SERVER" == "power" ]]; then
    handle_error "Bad input. Expected: gorp stop [server] [-f|n]"
fi

if [[ "$MODE" == "fast" ]] || [[ "$MODE" == "now" ]] || [[ "$MODE" == "power" ]]; then
    handle_error "Bad input. Expected: gorp stop [server] [-f|n]"
fi







### SERVER DIRECTORY RT-GUARD

if [[ -d "$HOMEDIR/servers/$SERVER" ]]; then
    cd $HOMEDIR/servers/$SERVER
else
    handle_error "Server not found"
fi







### NO SCREEN RT-GUARD
if [[ $(screen -ls | grep "$SERVER") == "" ]]; then
        handle_error "Server not running"
fi







### RUN WORKERS BASED ON PASSED PARAMS

if [[ "$MODE" == "normal" ]]; then
    bash /usr/local/bin/gorpmc/worker/backupworld.sh $1 $SERVER || handle_error "Failed to run backupworld.sh worker"
    bash /usr/local/bin/gorpmc/worker/warning.sh $1 $SERVER "stop" || handle_error "Failed to run warning.sh worker"
    bash /usr/local/bin/gorpmc/worker/shutdown.sh $1 $SERVER || handle_error "Failed to run shutdown.sh worker"
fi

if [[ "$MODE" == "f" ]]; then
    bash /usr/local/bin/gorpmc/worker/warning.sh $1 $SERVER "stop" || handle_error "Failed to run warning.sh worker"
    bash /usr/local/bin/gorpmc/worker/shutdown.sh $1 $SERVER || handle_error "Failed to run shutdown.sh worker"
fi

if [[ "$MODE" == "n" ]]; then
    bash /usr/local/bin/gorpmc/worker/shutdown.sh $1 $SERVER || handle_error "Failed to run shutdown.sh worker"
fi