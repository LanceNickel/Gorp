#!/usr/bin/env bash

### [ACTION: STOP] ################################################
#   Description:  Stop a server instance.
#   Parameters:   1: (required) Server directory name
#   Flags:        -f fast (skip backup)
#                 -n now  (skip backup and warning)

############################ [WARNING] ############################
##    No part of this script is designed to be user-editable.    ##
##   This script is OVERWRITTEN any time a Gorp update is run.   ##
###################################################################

# Copyright (C) Lance Nickel 2023.
# Distributed under GNU GPL v3.
# <https://gorp.lanickel.com/license/>



#### SETUP ############

#### Globals

. /usr/local/bin/gorpmc/functions/exit.sh
. /usr/local/bin/gorpmc/functions/params.sh
. /usr/local/bin/gorpmc/functions/functions.sh



#### Key guard

if [[ "$1" != "pleasedontdothis" ]]; then
    handle_error "Script not meant to be run directly."
fi



#### Collect arguments & additional variables

SERVER="$2"
MODE="$3"







####







#### GUARDS ############

#### Only allow --all with power

if [[ "$SERVER" == "--all" ]] && [[ "$MODE" != "power" ]]; then
    handle_error "Bad input. The only valid --all command is 'gorp stop --all power'."
fi

#### Bad user input (bypass if valid --all and power is sent)

if [[ "$SERVER" != "--all" ]] && [[ "$MODE" != "power" ]]; then

    if [[ "$SERVER" = "" ]] || [[ "$SERVER" == "fast" ]] || [[ "$SERVER" == "now" ]]; then
        handle_error "Bad input. Expected: gorp stop [server] <fast|now>."
    fi

    if [[ "$MODE" != "fast" ]] && [[ "$MODE" != "now" ]] && [[ "$MODE" != "" ]]; then
        handle_error "Bad input. Expected: gorp stop [server] <power|fast|now>."
    fi

fi



#### Server not found (bypass if --all sent)

if [[ "$SERVER" != "--all" ]]; then

    if [[ "$(does_server_exist $SERVER)" == "false" ]]; then
        handle_error "Server not found."
    fi

fi



#### Server is not running (bypass if --all sent)

if [[ "$SERVER" != "--all" ]]; then

    if [[ "$(is_server_running $SERVER)" == "false" ]]; then
            handle_error "Server is not running."
    fi

fi






#### COORDINATE WORKERS ############

#### Power shutdown (warning, no backup)

if [[ "$MODE" == "power" ]]; then

    #### Loop through server directories
    for d in "$HOMEDIR"/servers/*; do

        THIS_SERVER="$(basename $d)"

        #### Only if the server is running...
        if [[ "$(is_server_running $THIS_SERVER)" == "true" ]]; then
            bash /usr/local/bin/gorpmc/worker/warning.sh "$1" "$THIS_SERVER" "stop" || handle_error "Failed to run warning.sh worker."
            bash /usr/local/bin/gorpmc/worker/shutdown.sh "$1" "$THIS_SERVER" || handle_error "Failed to run shutdown.sh worker."
        fi

    done



#### Fast shutdown (no backup)

elif [[ "$MODE" == "fast" ]]; then
    bash /usr/local/bin/gorpmc/worker/warning.sh "$1" "$SERVER" "stop" || handle_error "Failed to run warning.sh worker."
    bash /usr/local/bin/gorpmc/worker/shutdown.sh "$1" "$SERVER" || handle_error "Failed to run shutdown.sh worker."



#### Now shutdown (no warning or backup)

elif [[ "$MODE" == "now" ]]; then
    bash /usr/local/bin/gorpmc/worker/shutdown.sh "$1" "$SERVER" || handle_error "Failed to run shutdown.sh worker."



#### Normal shutdown (no/unrecognized param)

else
    bash /usr/local/bin/gorpmc/worker/backupworld.sh "$1" "$SERVER" || handle_error "Failed to run backupworld.sh worker."
    bash /usr/local/bin/gorpmc/worker/warning.sh "$1" "$SERVER" "stop" || handle_error "Failed to run warning.sh worker."
    bash /usr/local/bin/gorpmc/worker/shutdown.sh "$1" "$SERVER" || handle_error "Failed to run shutdown.sh worker."
fi
