#!/usr/bin/env bash

### [ACTION: GORP UPGRADE] ########################################
#   Description:  Upgrade Gorp.
#   Parameters:   None

############################ [WARNING] ############################
##    No part of this script is designed to be user-editable.    ##
##   This script is OVERWRITTEN any time a Gorp update is run.   ##
###################################################################

# Copyright (C) Lance Nickel 2023.
# Distributed under GNU GPL v3.
# <https://gorp.lanickel.com/license/>



#### SETUP ############

#### Globals

. /usr/local/bin/gorpmc/functions/exit.sh
. /usr/local/bin/gorpmc/functions/params.sh
. /usr/local/bin/gorpmc/functions/functions.sh



#### Key guard

if [[ "$1" != "pleasedontdothis" ]]; then
    handle_error "Script not meant to be run directly."
fi



#### Collect arguments & additional variables

I_VERSION=$(grep 'Gorp version' /usr/local/etc/gorp.conf | cut -d ':' -f2 | cut -d ' ' -f3)







####







#### PROCESS LATEST RELEASE INFORMATION ############

#### Get & store release metadata from repo

cd /tmp/gorp/ || handle_error "Failed to cd to /tmp/gorp/.."
# wget -q https://raw.githubusercontent.com/LanceNickel/Gorp/main/release || handle_error "Unable to wget https://raw.githubusercontent.com/LanceNickel/Gorp/main/release."

# R_SHA256=$(grep 'SHA256=' release | cut -d '=' -f2)
# R_MD5=$(grep 'MD5=' release | cut -d '=' -f2)
# R_VERSION=$(grep 'V=' release | cut -d '=' -f2)



#### Do we even need to upgrade?

# if [[ "$I_VERSION" == "$R_VERSION" ]]; then
#     echo "No need to upgrade, already on latest available version."
#     exit 0
# fi







#### DOWNLOAD LATEST RELEASE ############

#### Get sudo permissions

echo "To upgrade, Gorp will use sudo"
sudo whoami > /dev/null || handle_error "Failed to get sudo privileges."





######## DOWNLOAD & VERIFY

echo "Downloading latest release..."

cd /tmp/gorp/ || handle_error "Failed to cd to /tmp/gorp/."
#wget -q https://gorp.lanickel.com/latest.tar.gz || handle_error "Failed to download latest release archive."
wget -q http://127.0.0.1/latest.tar.gz



#### Run checksums on downloaded files

# L_SHA256=$(sha256sum latest.tar.gz)
# L_MD5=$(md5sum latest.tar.gz)



#### Verify these checksums match the expected value in the release metadata

# if [[ "$L_SHA256" != "$R_SHA256" ]] || [[ "$L_MD5" != "$R_MD5" ]]; then
#     handle_error "Downloaded checksum does not match remote."
# fi





######## EXTRACT & RUN DOWNLOADED FILES

#### Extract tarball & rename

tar -xf latest.tar.gz > /dev/null || handle_error "Failed to unarchive downloaded files."
mv ./latest/ ./updatefiles/ || handle_error "Failed move downloaded files."



#### Run the upgrader

chmod +x /tmp/gorp/updatefiles/upgrade.sh || handle_error "Unable to give +x upgrade.sh file."
bash /tmp/gorp/updatefiles/upgrade.sh "$1" || handle_error "Failed to run upgrade.sh file."