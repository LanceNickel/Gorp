#!/usr/bin/env bash

### [GORP] ########################################################
#   Description:  Main Gorp launcher.
#   Parameters:   1: (required) Action
#                 2: (optional) Argument 1
#                 3: (optional) Argument 2

############################ [WARNING] ############################
##    No part of this script is designed to be user-editable.    ##
##   This script is OVERWRITTEN any time a Gorp update is run.   ##
###################################################################



#### GUARDS ################

### ROOT GUARD

if [[ "$EUID" == 0 ]]; then
    echo "Please don't run as root or with sudo. Exit (10)."
    exit 10
fi







#### SCRIPT PARAMETERS

source /usr/local/bin/gorpmc/worker/i_getconfigparams.sh



### SET DEFAULT PARAMS FOR NO FLAGS

TESTSTRING=pleasedontdothis
ACTION=$1
ARG1=$2
ARG2=$3
OUTPUT=true
ERRORS=true



### CHECK FOR FLAGS AND ADJUST PARAMS

OPTIND=1
while getopts ":fg:hnqQs:t:u:vy" flag; do
    case $flag in
        # GLOBAL FLAGS
        h)  # help (gorp -h)
            ACTION="help"
            ;;
        q)  # quiet (gorp -q [command])
            TESTSTRING=pleaseshutup
            ACTION=$2
            ARG1=$3
            ARG2=$4
            OUTPUT=false
            ERRORS=true
            ;;
        Q)  # Quiet (gorp -Q [command])
            TESTSTRING=pleasebesilent
            ACTION=$2
            ARG1=$3
            ARG2=$4
            OUTPUT=false
            ERRORS=false        
            ;;
        s)  # status (gorp -s [server])
            ACTION="status"
            ARG1="$OPTARG"
            ;;
        t)  #tail (gorp -t [server])
            ACTION="tail"
            ARG1="$OPTARG"
            ;;
        v)  # version (gorp -v)
            ACTION="version"
            ;;
        
        # RUNTIME FLAGS
        f)  # fast (gorp -f stop|restart [server])
            ACTION=$2
            ARG1=$3
            ARG2="-f"
            ;;
        g)  # gamever (gorp -g [version] get-jar)
            ACTION="get-jar"
            ARG1="-g"
            ARG2="$OPTARG"
            ;;
        n)  # now (gorp -n stop|restart [server])
            ACTION=$2
            ARG1=$3
            ARG2="-n"
            ;;
        u)  # url (gorp -u [url] get-jar)
            ACTION="get-jar"
            ARG1="-u"
            ARG2="$OPTARG"
            ;;
        y)
            ACTION=$2
            ARG1=$3
            ARG2="-y"
            ;;
        
        # UNKNOWN FLAGS (all other entries)
        *)
            echo "gorp: Invalid or unknown flags. Exit."
            exit 1
            ;;
    esac
done







####







### PARAMS RT-GUARD

if [[ "$GAMEVER" == "" ]] || [[ "$RAM" == "" ]] || [[ "$HOMEDIR" == "" ]] || [[ "$BACKUP_DEST" == "" ]] || [[ "$ARCHIVE_DEST" == "" ]] || [[ "$LATEST_JAR" == "" ]]; then
    if $ERRORS; then echo "gorp: One or more required options in gorp.conf not set. Exit (15)."; fi
    exit 15
fi







### ACTIONS

if [[ "$ACTION" == "backup-world" ]]; then
    /usr/local/bin/gorpmc/action/mcbackupworld $TESTSTRING $ARG1

elif [[ "$ACTION" == "backup-server" ]]; then
    /usr/local/bin/gorpmc/action/mcbackupserver $TESTSTRING $ARG1

elif [[ "$ACTION" == "restore-world" ]]; then
    /usr/local/bin/gorpmc/action/mcrestoreworld $TESTSTRING $ARG1

elif [[ "$ACTION" == "restore-server" ]]; then
    /usr/local/bin/gorpmc/action/mcrestoreserver $TESTSTRING $ARG1

elif [[ "$ACTION" == "update-jar" ]]; then
    /usr/local/bin/gorpmc/action/mcupdatejar $TESTSTRING

elif [[ "$ACTION" == "get-jar" ]]; then
    /usr/local/bin/gorpmc/action/mcgetjar $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "create-server" ]]; then
    /usr/local/bin/gorpmc/action/mccreateserver $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "delete-server" ]]; then
    /usr/local/bin/gorpmc/action/mcdeleteserver $TESTSTRING $ARG1

elif [[ "$ACTION" == "create-world" ]]; then
    /usr/local/bin/gorpmc/action/mccreateworld $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "delete-world" ]]; then
    /usr/local/bin/gorpmc/action/mcdeleteworld $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "reset-world" ]]; then
    /usr/local/bin/gorpmc/action/mcresetworld $TESTSTRING $ARG1

elif [[ "$ACTION" == "archive-world" ]]; then
    /usr/local/bin/gorpmc/action/mcarchiveworld $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "switch-world" ]]; then
    /usr/local/bin/gorpmc/action/mcswitchworld $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "power" ]]; then
    /usr/local/bin/gorpmc/action/mcpower $TESTSTRING

elif [[ "$ACTION" == "start" ]]; then
    /usr/local/bin/gorpmc/action/mcstart $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "stop" ]]; then
    /usr/local/bin/gorpmc/action/mcstop $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "restart" ]]; then
    /usr/local/bin/gorpmc/action/mcrestart $TESTSTRING $ARG1 $ARG2

elif [[ "$ACTION" == "help" ]]; then
    /usr/local/bin/gorpmc/action/gorphelp

elif [[ "$ACTION" == "upgrade" ]]; then
    /usr/local/bin/gorpmc/action/gorpupgrade $TESTSTRING

elif [[ "$ACTION" == "version" ]]; then
    /usr/local/bin/gorpmc/action/gorpversion

elif [[ "$ACTION" == "status" ]]; then
    /usr/local/bin/gorpmc/action/mcserverstatus $TESTSTRING $ARG1

elif [[ "$ACTION" == "tail" ]]; then
    tail -f $HOMEDIR/servers/$ARG1/logs/latest.log

elif [[ "$ACTION" == "ls" ]]; then
    echo $(ls $HOMEDIR/servers)

elif [[ "$ACTION" == "move-home" ]]; then
    /usr/local/bin/gorpmc/action/gorpmovehome $TESTSTRING $ARG1

else
    echo "Invalid parameters. Use gorp help for more information."
fi